/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tic_tac_toe_game;

import tic_tac_toe_game.TicTacToeAI;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Rifqi
 */
public class TicTacToeVsAI extends javax.swing.JFrame {
    private JButton[][] buttons;
    private char[][] board;
    private TicTacToeAI ai;
    private boolean playerTurn;
    /**
     * Creates new form TicTacToeVsAI
     */
    public TicTacToeVsAI() {
        initComponents();
        setTitle("Tic Tac Toe vs AI");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(300, 300);
        setLayout(new GridLayout(3, 3));
        buttons = new JButton[3][3];
        board = new char[3][3];
        ai = new TicTacToeAI('O', 'X'); // AI menggunakan 'O', pemain menggunakan 'X'

        // Inisialisasi tombol dan tambahkan ke layout frame
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j] = new JButton();
                buttons[i][j].setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 40));
                buttons[i][j].addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        JButton button = (JButton) e.getSource();
            int row = -1, col = -1;

            // Temukan tombol yang diklik dalam array tombol
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (buttons[i][j] == button) {
                        row = i;
                        col = j;
                        break;
                    }
                }
            }

            if (playerTurn && row != -1 && col != -1 && board[row][col] == ' ') {
                button.setText("X"); // Atur teks pada tombol yang diklik menjadi "X" (langkah pemain)
                button.setEnabled(false); // Nonaktifkan tombol setelah digunakan
                board[row][col] = 'X'; // Update 'board' sesuai langkah pemain

                // Setelah pemain melakukan langkah, giliran AI
                playerTurn = false;
                if (!isGameOver()) {
                    performAIMove(); // Lakukan langkah AI setelah pemain
                }
            }

                    }

                });
                add(buttons[i][j]);
            }
        }

        playerTurn = true; // Giliran pemain yang pertama

        initializeBoard();
    }

    
    private boolean isGameOver() {
        for (int i = 0; i < 3; i++) {
        if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][0] == board[i][2]) {           
            declareWinner(board[i][0]);
            return true;
        }
    }

    // Check vertical lines
    for (int i = 0; i < 3; i++) {
        if (board[0][i] != ' ' && board[0][i] == board[1][i] && board[0][i] == board[2][i]) {            
            declareWinner(board[0][i]);
            return true;
        }
    }

    // Check diagonals
    if (board[0][0] != ' ' && board[0][0] == board[1][1] && board[0][0] == board[2][2]) {        
        declareWinner(board[0][0]);
        return true;
    }
    if (board[0][2] != ' ' && board[0][2] == board[1][1] && board[0][2] == board[2][0]) {        
        declareWinner(board[0][2]);
        return true;
    }

    // Check if the board is full (draw)
    boolean boardFull = true;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ') {
                boardFull = false;
                break;
            }
        }
    }
    if (boardFull) {
        declareDraw();
        return true;
    }

    return false;
    }    

    private void declareWinner(char winner) {
        String message = (winner == 'X') ? "Player" : "AI";
        message += " wins!";
        
        JOptionPane.showMessageDialog(this, message);
        resetBoard();
    }

    private void declareDraw() {        
        JOptionPane.showMessageDialog(this, "It's a draw!");
        resetBoard();
    }
    
    
    private void performAIMove() {
           int bestMove = ai.findBestMove(board, WIDTH);
        int row = bestMove / 3;
        int col = bestMove % 3;

        buttons[row][col].setText("O");
        buttons[row][col].setEnabled(false);
        board[row][col] = 'O';
        playerTurn = true;
        if (!isGameOver()) {            
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicTacToeVsAI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicTacToeVsAI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicTacToeVsAI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicTacToeVsAI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicTacToeVsAI().setVisible(true);
            }
        });
    }

    private void initializeBoard() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j].setText("");
                buttons[i][j].setEnabled(true);
                board[i][j] = ' ';
            }
        }
    }

    private void resetBoard() {
        initializeBoard();
        playerTurn = true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
